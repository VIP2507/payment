{"version":3,"sources":["script.js","CheckoutForm.js","App.js","index.js"],"names":["stripePaymentMethodHandler","data","cb","a","amount","result","error","stripePayment","payment_method_id","paymentMethod","id","name","billing_details","email","paymentResponse","console","log","fetch","method","headers","body","JSON","stringify","res","json","CARD_ELEMENT_OPTIONS","style","base","lineHeight","color","fontSize","invalid","iconColor","CheckoutForm","props","useState","loading","setLoading","errorMsg","setErrorMsg","setName","setEmail","stripe","useStripe","elements","useElements","handleSubmit","event","preventDefault","paymentMethodObj","type","card","getElement","CardNumberElement","createPaymentMethod","paymentMethodResult","handleResponse","response","message","setPaymentCompleted","success","Fragment","className","onSubmit","htmlFor","value","onChange","e","target","options","disabled","role","stripePromise","loadStripe","App","paymentCompleted","fontFamily","fontWeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAEaA,EAA0B,uCAAG,WAAOC,EAAMC,GAAb,mBAAAC,EAAA,yDAChCC,EAAmBH,EAAnBG,SAAQC,EAAWJ,EAAXI,QACLC,MAF6B,gBAItCJ,EAAGG,GAJmC,uCAMRE,EAAc,CAC1CC,kBAAmBH,EAAOI,cAAcC,GACxCC,KAAMN,EAAOI,cAAcG,gBAAgBD,KAC3CE,MAAOR,EAAOI,cAAcG,gBAAgBC,MAC5CT,OAAQA,IAV4B,OAMhCU,EANgC,OAYtCC,QAAQC,IAAIF,GACZZ,EAAGY,GAbmC,4CAAH,wDAkBjCP,EAAa,uCAAG,WAAMN,GAAN,eAAAE,EAAA,sEACFc,MAAM,GAAD,OArBJ,wBAqBI,QAAwB,CAC7CC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUrB,KAJH,cACdsB,EADc,gBAMPA,EAAIC,OANG,mFAAH,sD,OCbbC,EAAuB,CAC3BC,MAAO,CACLC,KAAM,CACJC,WAAY,OACZC,MAAO,UACPC,SAAU,SACV,gBAAiB,CACfD,MAAO,YAGXE,QAAS,CACPF,MAAO,UACPG,UAAW,aAKF,SAASC,EAAaC,GAAQ,IAAD,EACZC,oBAAS,GADG,mBACnCC,EADmC,KAC1BC,EAD0B,OAEVF,mBAAS,IAFC,mBAEnCG,EAFmC,KAEzBC,EAFyB,OAIlBJ,mBAAS,IAJS,mBAInCxB,EAJmC,KAI7B6B,EAJ6B,OAKhBL,mBAAS,IALO,mBAKnCtB,EALmC,KAK5B4B,EAL4B,KAOpCC,EAASC,sBACTC,EAAWC,wBAEXC,EAAY,uCAAG,WAAOC,GAAP,iBAAA5C,EAAA,yDAGnB4C,EAAMC,iBAEDN,GAAWE,EALG,wDAWnBP,GAAW,GACXE,EAAY,IAENU,EAAmB,CACvBC,KAAM,OACNC,KAAMP,EAASQ,WAAWC,qBAC1BzC,gBAAiB,CACfD,OACAE,UAnBe,SAsBe6B,EAAOY,oBAAoBL,GAtB1C,OAsBbM,EAtBa,OAwBnBvD,EAA2B,CACzBK,OAAQkD,EACRnD,OAAQ8B,EAAM9B,QACboD,GA3BgB,4CAAH,sDA+BZA,EAAiB,SAAAC,GACrBpB,GAAW,GACPoB,EAASnD,MACXiC,EAAsC,kBAAnBkB,EAASnD,MAAqBmD,EAASnD,MAAQmD,EAASnD,MAAMoD,SAGnFxB,EAAMyB,sBAAoBF,EAASG,UAGrC,OACE,eAAC,IAAMC,SAAP,WACE,oBAAIC,UAAU,yDAAd,SACE,sBAAMA,UAAU,aAAhB,6BAEF,uBAAMC,SAAUjB,EAAhB,UAEE,sBAAKgB,UAAU,MAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,uBAAOE,QAAQ,UAAf,0BACA,uBACEtD,GAAG,UACHwC,KAAK,OACLY,UAAU,eACVG,MAAOtD,EACPuD,SAAU,SAAAC,GAAC,OAAI3B,EAAQ2B,EAAEC,OAAOH,aAGpC,sBAAKH,UAAU,gBAAf,UACE,uBAAOE,QAAQ,WAAf,mBACA,uBACEtD,GAAG,WACHwC,KAAK,OACLY,UAAU,eACVG,MAAOpD,EACPqD,SAAU,SAAAC,GAAC,OAAI1B,EAAS0B,EAAEC,OAAOH,gBAKvC,qBAAKH,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,uBAAOE,QAAQ,YAAf,yBACA,cAAC,oBAAD,CACEtD,GAAG,YACHoD,UAAU,eACVO,QAAS5C,SAKf,sBAAKqC,UAAU,MAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,uBAAOE,QAAQ,SAAf,6BACA,cAAC,oBAAD,CACEtD,GAAG,SACHoD,UAAU,eACVO,QAAS5C,OAGb,sBAAKqC,UAAU,gBAAf,UACE,uBAAOE,QAAQ,MAAf,iBACA,cAAC,iBAAD,CACEtD,GAAG,MACHoD,UAAU,eACVO,QAAS5C,UAKf,oBAAIqC,UAAU,SACd,wBAAQA,UAAU,qBAAqBZ,KAAK,SAASoB,SAAUlC,EAA/D,SACGA,EAAU,qBAAK0B,UAAU,8CAA8CS,KAAK,WAArE,oBAA+FrC,EAAM9B,UAE9GkC,GAAY,qBAAKwB,UAAU,mBAAf,SAAmCxB,U,UCjIlDkC,EAAgBC,YAAW,WA+ElBC,MA1Bf,WAAgB,IAAD,EACmCvC,oBAAS,GAD5C,mBACNwC,EADM,KACYhB,EADZ,KAGb,OACE,sBAAKG,UAAU,YAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,oBAAIpC,MAAO,CAACkD,WAAW,UAAUC,WAAW,OAAOhD,MAAM,WAAzD,uBAGF,qBAAKiC,UAAU,YAAf,SACGa,EA3DL,qBAAKb,UAAU,cAAf,SACE,qBAAKA,UAAU,QAAf,kCA0DyC,eAAC,IAAMD,SAAP,WACrC,qBAAKC,UAAU,2BAAf,SArDA,eAAC,IAAMD,SAAP,WACN,qBAAIC,UAAU,yDAAd,UACE,sBAAMA,UAAU,aAAhB,uBACA,sBAAMA,UAAU,gCAAhB,kBAEF,qBAAIA,UAAU,kBAAd,UACE,qBAAIA,UAAU,8DAAd,UACE,gCACE,oBAAIA,UAAU,OAAd,0BACA,uBAAOA,UAAU,aAAjB,kCAEF,sBAAMA,UAAU,aAAhB,2BAEF,qBAAIA,UAAU,8DAAd,UACE,gCACE,oBAAIA,UAAU,OAAd,4BACA,uBAAOA,UAAU,aAAjB,kCAEF,sBAAMA,UAAU,aAAhB,0BAEF,qBAAIA,UAAU,8DAAd,UACE,gCACE,oBAAIA,UAAU,OAAd,wBACA,uBAAOA,UAAU,aAAjB,kCAEF,sBAAMA,UAAU,aAAhB,0BAEF,qBAAIA,UAAU,0DAAd,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,OAAd,wBACA,mDAEF,sBAAMA,UAAU,eAAhB,2BAEF,qBAAIA,UAAU,iDAAd,UACE,+CACA,2DAoBE,qBAAKA,UAAU,sBAAf,SACE,cAAC,WAAD,CAAUpB,OAAQ8B,EAAlB,SACE,cAACvC,EAAD,CAAc7B,OAAQ,IAAMuD,oBAAqBA,iBCzE/DmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.26ce5777.chunk.js","sourcesContent":["const API_ENDPOINT = 'http://localhost:4000';\n\nexport const stripePaymentMethodHandler = async (data, cb) => {\n  const { amount, result } = data;\n  if (result.error) {\n    // show error in payment form\n    cb(result);\n  } else {\n    const paymentResponse = await stripePayment({\n      payment_method_id: result.paymentMethod.id,\n      name: result.paymentMethod.billing_details.name,\n      email: result.paymentMethod.billing_details.email,\n      amount: amount\n    });\n    console.log(paymentResponse);\n    cb(paymentResponse);\n  }\n}\n\n// place backend API call for payment\nconst stripePayment = async data => {\n  const res = await fetch(`${API_ENDPOINT}/pay`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  })\n  return await res.json();\n}","import React, { useState } from 'react';\nimport {\n  useStripe, useElements,\n  CardNumberElement, CardExpiryElement, CardCvcElement\n} from '@stripe/react-stripe-js';\nimport { stripePaymentMethodHandler } from './script';\n\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      lineHeight: \"27px\",\n      color: \"#212529\",\n      fontSize: \"1.1rem\",\n      \"::placeholder\": {\n        color: \"#aab7c4\",\n      },\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\",\n    },\n  },\n};\n\nexport default function CheckoutForm(props) {\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setLoading(true);\n    setErrorMsg('');\n\n    const paymentMethodObj = {\n      type: 'card',\n      card: elements.getElement(CardNumberElement),\n      billing_details: {\n        name,\n        email\n      },\n    };\n    const paymentMethodResult = await stripe.createPaymentMethod(paymentMethodObj);\n\n    stripePaymentMethodHandler({\n      result: paymentMethodResult,\n      amount: props.amount\n    }, handleResponse);\n  };\n\n  // callback method to handle the response\n  const handleResponse = response => {\n    setLoading(false);\n    if (response.error) {\n      setErrorMsg(typeof response.error === 'string' ? response.error : response.error.message);\n      return;\n    }\n    props.setPaymentCompleted(response.success ? true : false);\n  };\n\n  return (\n    <React.Fragment>\n      <h4 className=\"d-flex justify-content-between align-items-center mb-3\">\n        <span className=\"text-muted\">Pay with card</span>\n      </h4>\n      <form onSubmit={handleSubmit}>\n\n        <div className=\"row\">\n          <div className=\"col-md-6 mb-3\">\n            <label htmlFor=\"cc-name\">Name on card</label>\n            <input\n              id=\"cc-name\"\n              type=\"text\"\n              className=\"form-control\"\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n          </div>\n          <div className=\"col-md-6 mb-3\">\n            <label htmlFor=\"cc-email\">Email</label>\n            <input\n              id=\"cc-email\"\n              type=\"text\"\n              className=\"form-control\"\n              value={email}\n              onChange={e => setEmail(e.target.value)}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-12 mb-3\">\n            <label htmlFor=\"cc-number\">Card Number</label>\n            <CardNumberElement\n              id=\"cc-number\"\n              className=\"form-control\"\n              options={CARD_ELEMENT_OPTIONS}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6 mb-3\">\n            <label htmlFor=\"expiry\">Expiration Date</label>\n            <CardExpiryElement\n              id=\"expiry\"\n              className=\"form-control\"\n              options={CARD_ELEMENT_OPTIONS}\n            />\n          </div>\n          <div className=\"col-md-6 mb-3\">\n            <label htmlFor=\"cvc\">CVC</label>\n            <CardCvcElement\n              id=\"cvc\"\n              className=\"form-control\"\n              options={CARD_ELEMENT_OPTIONS}\n            />\n          </div>\n        </div>\n\n        <hr className=\"mb-4\" />\n        <button className=\"btn btn-dark w-100\" type=\"submit\" disabled={loading}>\n          {loading ? <div className=\"spinner-border spinner-border-sm text-light\" role=\"status\"></div> : `PAY ₹${props.amount}`}\n        </button>\n        {errorMsg && <div className=\"text-danger mt-2\">{errorMsg}</div>}\n      </form>\n    </React.Fragment>\n  );\n}","import React, { useState } from 'react';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport CheckoutForm from './CheckoutForm';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n// Make sure to call `loadStripe` outside of a component’s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe(\"API_KEY\");\n\nconst successMessage = () => {\n  return (\n    <div className=\"success-msg\">\n      <div className=\"title\">Payment Successful</div>\n    </div>\n  )\n}\n\nconst cart = () => {\n  return (<React.Fragment>\n    <h4 className=\"d-flex justify-content-between align-items-center mb-3\">\n      <span className=\"text-muted\">Your cart</span>\n      <span className=\"badge bg-secondary badge-pill\">3</span>\n    </h4>\n    <ul className=\"list-group mb-3\">\n      <li className=\"list-group-item d-flex justify-content-between lh-condensed\">\n        <div>\n          <h6 className=\"my-0\">Product name</h6>\n          <small className=\"text-muted\">Brief description</small>\n        </div>\n        <span className=\"text-muted\">₹1200</span>\n      </li>\n      <li className=\"list-group-item d-flex justify-content-between lh-condensed\">\n        <div>\n          <h6 className=\"my-0\">Second product</h6>\n          <small className=\"text-muted\">Brief description</small>\n        </div>\n        <span className=\"text-muted\">₹800</span>\n      </li>\n      <li className=\"list-group-item d-flex justify-content-between lh-condensed\">\n        <div>\n          <h6 className=\"my-0\">Third item</h6>\n          <small className=\"text-muted\">Brief description</small>\n        </div>\n        <span className=\"text-muted\">₹500</span>\n      </li>\n      <li className=\"list-group-item d-flex justify-content-between bg-light\">\n        <div className=\"text-success\">\n          <h6 className=\"my-0\">Promo code</h6>\n          <small>EXAMPLECODE</small>\n        </div>\n        <span className=\"text-success\">-₹500</span>\n      </li>\n      <li className=\"list-group-item d-flex justify-content-between\">\n        <span>Total (INR)</span>\n        <strong>₹2000</strong>\n      </li>\n    </ul>\n  </React.Fragment>)\n}\n\nfunction App() {\n  const [paymentCompleted, setPaymentCompleted] = useState(false);\n\n  return (\n    <div className=\"container\">\n      <div className=\"py-5 text-center\">\n        <h4 style={{fontFamily:'cursive',fontWeight:'bold',color:'#2f2f2f'}}>PAYMENT</h4>\n      </div>\n\n      <div className=\"row s-box\">\n        {paymentCompleted ? successMessage() : <React.Fragment>\n          <div className=\"col-md-5 order-md-2 mb-4\">\n            {cart()}\n          </div>\n          <div className=\"col-md-7 order-md-1\">\n            <Elements stripe={stripePromise}>\n              <CheckoutForm amount={2000} setPaymentCompleted={setPaymentCompleted} />\n            </Elements>\n          </div>\n        </React.Fragment>}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}